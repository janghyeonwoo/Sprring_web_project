<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"  
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!--aop는 aop관련 태그작성가능, tx는 트랜잭션관련 태그작성가능  -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/include/**" location="/WEB-INF/views/include/" />
	<resources mapping="/images/**" location="/WEB-INF/views/images/" />
	<resources mapping="/json/**" location="/WEB-INF/views/json/" />
	<resources mapping="/ckeditor/**" location="/WEB-INF/views/ckeditor/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 스프링 빈을 태그로 등록하지 않고 자동으로 검색(auto scan), 리파지토리,컨트롤러등을 찾아서  자동으로 올려준다. 이하패키지를 싹 뒤진다--> 
	<context:component-scan base-package="com.example.spring02" />
	<!--파일업로드 하기위함  -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/><!-- 업로드최대용량 -->
	</beans:bean>
	<beans:bean id="uploadPath" class="java.lang.String"> <!--업로드위치 , 디렉토리를반드시 미리 만들어야한다 아니면 에러남 -->
		<beans:constructor-arg value="d:/upload"/> 
	</beans:bean>
	<!-- aop -->
	<aop:aspectj-autoproxy/>
	
	<!-- 인터셉터 선언  -->
	<beans:bean id="samleInterceptor" class="com.example.spring02.interceptor.SampleInterceptor"/>
	<beans:bean id="LoginInterceptor" class="com.example.spring02.interceptor.LoginInterceptor"/>
	<beans:bean id="AdminInterceptor" class="com.example.spring02.interceptor.AdminInterceptor"/>
	<!-- 인터셉터와 url 매핑 -->
	<interceptors>
		<interceptor>
		<!-- 인터셉터의 매핑정보  -->
		<!-- shop 하위 url에 인터셉터 적용  -->
			<mapping path="/shop/**"/>  <!--url에 /shop으로시작하면 samleInterceptor가 작동한다   -->
			<beans:ref bean = "samleInterceptor"/>
		</interceptor>
		<interceptor>
		<!-- 로그인 세션 체크를 위한 인터셉터 설정  -->
			<mapping path="/shop/cart/list.do"/>
			<mapping path="/shop/cart/insert.do"/>
			<mapping path="/board/insert.do"/>
			<mapping path="/board/write.do"/>
			    
			<beans:ref bean = "LoginInterceptor"/>
		</interceptor>
		<interceptor>
		<!-- 관리자 세션 체크를 위한 인터셉터 설정  -->
			<mapping path="/shop/product/write.do"/>
			<mapping path="/shop/product/insert.do"/>  
			<mapping path="/chart/*"/>
			<mapping path="/pdf/*"/> 
			<beans:ref bean = "AdminInterceptor"/>
		</interceptor>
		
	</interceptors>
</beans:beans>
